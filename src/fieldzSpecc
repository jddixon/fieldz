#!/usr/bin/python3

# ~/dev/py/fieldz/fieldzSpecc

import os
# import re
import sys
import time
from argparse import ArgumentParser

from optionz import dump_options
from xlattice import u
from upax.server import BlockingServer
from fieldz import __version__, __version_date__

# import fieldz.compiler

# PATs AND REs ######################################################


def do_whatevr(args):
    u_dir = args.u_dir
    verbose = args.verbose

    log_dir = args.log_dir       # XXX A DIFFERENT LOG
    _ = log_dir                 # suppress warnings

    string = BlockingServer(u_dir)
    upax_log = string.log
    if verbose:
        print("there were %7u files in %s at the beginning of the run" % (
            len(upax_log), u_dir))

    src = args.pgm_name_and_version
    _ = src                                         # UNUSED

    def parse_spec_file(path_to_file):
        lines = []
        with open(path_to_file, 'r') as file:
            line = file.readline()
            while line:
                print(":: " + line, end=' ')         # DEBUG

                lines.append(line)
                line = file.readline()

        pass

    def walk_specs_tree(dir_):
        """ walk the specs tree, parsing whatever we find """
        files = sorted(os.listdir(dir_))
        for file in files:
            if file.startswith('.'):            # eg .svn
                print("skipping '%s'" % file)
                continue
            path_to_file = os.path.join(dir, file)
            if os.path.isdir(path_to_file):
                walk_specs_tree(path_to_file)
            elif path_to_file.endswith('.xlgo'):
                parse_spec_file(path_to_file)
            else:
                print("don't recognize    '%s'" % path_to_file)

#           hash        = u.fileSHA1(pathToFile)
#           if no_changes:
#               if verbose:     print 'would add %s %s' % (hash, pathToFile)
#           else:
#               s.put (pathToFile, hash, src)   # GEEP

    walk_specs_tree(args.in_dir)

    if verbose:
        print("there are  %7u files in %s at the end of the run" % (
            len(upax_log), u_dir))
    string.close()


def main():

    pgm_name_and_version = "fieldzSpecc v%s %s" % (
        __version__, __version_date__)
    timestamp = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # -- program defaults -------------------------------------------

    # -- check for config file --------------------------------------

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html
    parser = ArgumentParser('post new files in a directory into Upax')

    parser.add_argument('-e', '--ec2Host', action='store_true',
                        help='set if machine is in EC2')

    parser.add_argument('-i', '--in_dir', default='specs',
                        help='path to input directory, default = specs/')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show args and exit')

    parser.add_argument('-L', '--log_dir', default='logs',
                        help='path to log directory, default = logs/')

    parser.add_argument('-t', '--show_timestamp', action='store_true',
                        help='show run timestamp')

    # just the base name (usually Upax or Upax0) we will fix this up below
    parser.add_argument('-u', '--u_dir', default='Upax',
                        help='base name of  U/ directory, default to Upax')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='test run - write to ./u_dir')

    parser.add_argument('-V', '--show_version', action='store_true',
                        help='show version number and date')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='talk a lot')

    parser.add_argument('-z', '--no_changes', action='store_true',
                        help="don't actually write anything to disk")

    args = parser.parse_args()      # a Namespace object

    # -- fixups -----------------------------------------------------
    args.pgm_name_and_version = pgm_name_and_version
    if args.testing:
        # args.in_dir = 'testIn'
        pass
    args.timestamp = timestamp

    # -- sanity checks ----------------------------------------------
    if not os.path.exists(args.in_dir):
        print("input directory '%s' does not exist" % args.in_dir)
        sys.exit(1)

    # fixups --------------------------------------------------------
    args.pgm_name_and_version = pgm_name_and_version
    if args.u_dir and args.u_dir[-1] == '/':
        args.u_dir = args.u_dir[:-1]          # drop any trailing slash

    if args.testing:
        args.u_dir = 'u_dir'                 # a local directory
    elif args.ec2Host:
        args.u_dir = os.path.join('/vol', args.u_dir)
    else:
        args.u_dir = os.path.join('/var', args.u_dir)

    if not os.path.exists(args.log_dir):
        # XXX can't handle .. in path
        os.makedirs(args.log_dir)

    # -- do it ------------------------------------------------------
    if args.verbose or args.show_version or args.just_show:
        print(args.pgm_name_and_version)
    if args.show_timestamp:
        print('run at %s GMT' % timestamp)   # could be prettier
    else:
        print()                               # there's a comma up there

    if args.just_show or args.verbose:
        print(dump_options(args))

    if not args.just_show:
        lock = u.ULock(args.u_dir)
        try:
            if lock.get_lock():
                do_whatevr(args)
            else:
                print('could not get lock on %s' % args.u_dir)
        finally:
            lock.release_lock()


if __name__ == '__main__':
    main()
